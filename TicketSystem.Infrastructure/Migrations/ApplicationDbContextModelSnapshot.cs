// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketSystem.Infrastructure;

#nullable disable

namespace TicketSystem.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TicketSystem.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TicketSystem.Core.Entities.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("tickets");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            CreatedAt = new DateTime(2024, 8, 7, 13, 13, 23, 980, DateTimeKind.Local).AddTicks(4962),
                            ImagePath = "/Images/Tickets/ticket.png",
                            Number = "TICKET1",
                            UserId = 1
                        },
                        new
                        {
                            TicketId = 2,
                            CreatedAt = new DateTime(2024, 8, 7, 13, 14, 23, 980, DateTimeKind.Local).AddTicks(5080),
                            ImagePath = "/Images/Tickets/ticket.png",
                            Number = "TICKET2",
                            UserId = 2
                        },
                        new
                        {
                            TicketId = 3,
                            CreatedAt = new DateTime(2024, 8, 7, 13, 15, 23, 980, DateTimeKind.Local).AddTicks(5084),
                            ImagePath = "/Images/Tickets/ticket.png",
                            Number = "TICKET3",
                            UserId = 3
                        },
                        new
                        {
                            TicketId = 4,
                            CreatedAt = new DateTime(2024, 8, 7, 13, 16, 23, 980, DateTimeKind.Local).AddTicks(5087),
                            ImagePath = "/Images/Tickets/ticket.png",
                            Number = "TICKET4",
                            UserId = 4
                        },
                        new
                        {
                            TicketId = 5,
                            CreatedAt = new DateTime(2024, 8, 7, 13, 17, 23, 980, DateTimeKind.Local).AddTicks(5090),
                            ImagePath = "/Images/Tickets/ticket.png",
                            Number = "TICKET5",
                            UserId = 5
                        },
                        new
                        {
                            TicketId = 6,
                            CreatedAt = new DateTime(2024, 8, 7, 13, 18, 23, 980, DateTimeKind.Local).AddTicks(5092),
                            ImagePath = "/Images/Tickets/ticket.png",
                            Number = "TICKET6",
                            UserId = 6
                        },
                        new
                        {
                            TicketId = 7,
                            CreatedAt = new DateTime(2024, 8, 7, 13, 19, 23, 980, DateTimeKind.Local).AddTicks(5095),
                            ImagePath = "/Images/Tickets/ticket.png",
                            Number = "TICKET7",
                            UserId = 7
                        },
                        new
                        {
                            TicketId = 8,
                            CreatedAt = new DateTime(2024, 8, 7, 13, 20, 23, 980, DateTimeKind.Local).AddTicks(5097),
                            ImagePath = "/Images/Tickets/ticket.png",
                            Number = "TICKET8",
                            UserId = 8
                        },
                        new
                        {
                            TicketId = 9,
                            CreatedAt = new DateTime(2024, 8, 7, 13, 21, 23, 980, DateTimeKind.Local).AddTicks(5100),
                            ImagePath = "/Images/Tickets/ticket.png",
                            Number = "TICKET9",
                            UserId = 9
                        },
                        new
                        {
                            TicketId = 10,
                            CreatedAt = new DateTime(2024, 8, 7, 13, 22, 23, 980, DateTimeKind.Local).AddTicks(5102),
                            ImagePath = "/Images/Tickets/ticket.png",
                            Number = "TICKET10",
                            UserId = 10
                        });
                });

            modelBuilder.Entity("TicketSystem.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "user1",
                            PhoneNumber = "01204016981"
                        },
                        new
                        {
                            Id = 2,
                            Name = "user2",
                            PhoneNumber = "01204016982"
                        },
                        new
                        {
                            Id = 3,
                            Name = "user3",
                            PhoneNumber = "01204016983"
                        },
                        new
                        {
                            Id = 4,
                            Name = "user4",
                            PhoneNumber = "01204016984"
                        },
                        new
                        {
                            Id = 5,
                            Name = "user5",
                            PhoneNumber = "01204016985"
                        },
                        new
                        {
                            Id = 6,
                            Name = "user6",
                            PhoneNumber = "01204016986"
                        },
                        new
                        {
                            Id = 7,
                            Name = "user7",
                            PhoneNumber = "01204016987"
                        },
                        new
                        {
                            Id = 8,
                            Name = "user8",
                            PhoneNumber = "01204016988"
                        },
                        new
                        {
                            Id = 9,
                            Name = "user9",
                            PhoneNumber = "01204016989"
                        },
                        new
                        {
                            Id = 10,
                            Name = "user10",
                            PhoneNumber = "01204016910"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TicketSystem.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TicketSystem.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketSystem.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TicketSystem.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketSystem.Core.Entities.Ticket", b =>
                {
                    b.HasOne("TicketSystem.Core.Entities.User", "User")
                        .WithOne("Ticket")
                        .HasForeignKey("TicketSystem.Core.Entities.Ticket", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicketSystem.Core.Entities.User", b =>
                {
                    b.Navigation("Ticket");
                });
#pragma warning restore 612, 618
        }
    }
}
